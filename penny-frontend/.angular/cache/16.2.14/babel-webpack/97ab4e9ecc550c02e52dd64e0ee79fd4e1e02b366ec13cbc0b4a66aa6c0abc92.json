{"ast":null,"code":"import { createEffect, ofType } from '@ngrx/effects';\nimport { loadProductStart, loadProductSuccess } from './product.action';\nimport { map, mergeMap, of, withLatestFrom } from 'rxjs';\nimport { getProducts } from './product.selector';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nimport * as i2 from \"@ngrx/effects\";\nimport * as i3 from \"../services/product.service\";\nexport class ProductEffects {\n  constructor(store, actions$, productService) {\n    this.store = store;\n    this.actions$ = actions$;\n    this.productService = productService;\n    this.loadProduct$ = createEffect(() => this.actions$.pipe(ofType(loadProductStart), withLatestFrom(this.store.select(getProducts)), mergeMap(([action, products]) => {\n      // Start Loader if you want to\n      if (!products.length) {\n        return this.productService.getPosts().pipe(map(products => {\n          // stop your loader\n          return loadProductSuccess({\n            products\n          });\n        }));\n      } else {\n        // no Length Message and stop loader\n        return of();\n      }\n    })));\n  }\n  static #_ = this.ɵfac = function ProductEffects_Factory(t) {\n    return new (t || ProductEffects)(i0.ɵɵinject(i1.Store), i0.ɵɵinject(i2.Actions), i0.ɵɵinject(i3.ProductService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ProductEffects,\n    factory: ProductEffects.ɵfac\n  });\n}","map":{"version":3,"names":["createEffect","ofType","loadProductStart","loadProductSuccess","map","mergeMap","of","withLatestFrom","getProducts","ProductEffects","constructor","store","actions$","productService","loadProduct$","pipe","select","action","products","length","getPosts","_","i0","ɵɵinject","i1","Store","i2","Actions","i3","ProductService","_2","factory","ɵfac"],"sources":["C:\\Huzaifa\\Penny\\penny-frontend\\src\\app\\product\\store\\product.effects.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { ProductService } from '../services/product.service';\r\nimport {\r\n  addProduct,\r\n  addProductSuccess,\r\n  deleteProduct,\r\n  deleteProductSuccess,\r\n  loadProductStart,\r\n  loadProductSuccess,\r\n  updateProduct,\r\n  updateProductSuccess,\r\n} from './product.action';\r\nimport { filter, map, mergeMap, of, switchMap, withLatestFrom } from 'rxjs';\r\nimport { IProduct } from './product.state';\r\nimport { Store } from '@ngrx/store';\r\nimport { IAppState } from 'src/app/store/app.state';\r\nimport { ROUTER_NAVIGATED, RouterNavigatedAction } from '@ngrx/router-store';\r\nimport { Update } from '@ngrx/entity';\r\nimport { getProducts } from './product.selector';\r\n\r\n@Injectable()\r\nexport class ProductEffects {\r\n  constructor(\r\n    private store: Store<IAppState>,\r\n    private actions$: Actions,\r\n    private productService: ProductService\r\n  ) {}\r\n\r\n  loadProduct$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(loadProductStart),\r\n      withLatestFrom(this.store.select(getProducts)),\r\n      mergeMap(([action, products]) => {\r\n        // Start Loader if you want to\r\n        if (!products.length) {\r\n          return this.productService.getPosts().pipe(\r\n            map((products: IProduct[]) => {\r\n              // stop your loader\r\n              return loadProductSuccess({ products });\r\n            })\r\n          );\r\n        } else {\r\n          // no Length Message and stop loader\r\n          return of();\r\n        }\r\n      })\r\n    )\r\n  );\r\n\r\n  // addPost$ = createEffect(() =>\r\n  //   this.actions$.pipe(\r\n  //     ofType(addPost),\r\n  //     mergeMap((action: any) => {\r\n  //       this.store.dispatch(setLoader({ status: true }));\r\n  //       return this.postService.addPost(action.post).pipe(\r\n  //         map((resp) => {\r\n  //           this.store.dispatch(setLoader({ status: false }));\r\n  //           const post = { ...action.post, id: resp.name };\r\n  //           return addPostSuccess({ post });\r\n  //         })\r\n  //       );\r\n  //     })\r\n  //   )\r\n  // );\r\n\r\n  // updatePost$ = createEffect(() =>\r\n  //   this.actions$.pipe(\r\n  //     ofType(updatePost),\r\n  //     mergeMap((action: any) => {\r\n  //       this.store.dispatch(setLoader({ status: true }));\r\n  //       return this.postService.updatePost(action.updatedPost).pipe(\r\n  //         map((resp) => {\r\n  //           this.store.dispatch(setLoader({ status: false }));\r\n  //           //  return updatePostSuccess({ updatedPost: action.updatedPost });\r\n  //           const updatedPost: Update<IPost> = {\r\n  //             id: action.updatedPost.id,\r\n  //             changes: {\r\n  //               ...action.updatedPost,\r\n  //             },\r\n  //           };\r\n  //           return updatePostSuccess({ updatedPost });\r\n  //         })\r\n  //       );\r\n  //     })\r\n  //   )\r\n  // );\r\n\r\n  // deletePost$ = createEffect(() =>\r\n  //   this.actions$.pipe(\r\n  //     ofType(deletePost),\r\n  //     mergeMap((action) => {\r\n  //       this.store.dispatch(setLoader({ status: true }));\r\n  //       return this.postService.deletePost(action.id).pipe(\r\n  //         map((resp) => {\r\n  //           this.store.dispatch(setLoader({ status: false }));\r\n  //           return deletePostSuccess({ id: action.id });\r\n  //         })\r\n  //       );\r\n  //     })\r\n  //   )\r\n  // );\r\n\r\n  // postById$ = createEffect(() =>\r\n  //   this.actions$.pipe(\r\n  //     ofType(ROUTER_NAVIGATED),\r\n  //     filter((r: RouterNavigatedAction) =>\r\n  //       r.payload.routerState.url.startsWith('/post/detail')\r\n  //     ),\r\n  //     map((r: any) => r.payload.routerState['params']['id'] || ''),\r\n  //     withLatestFrom(this.store.select(getPosts)),\r\n  //     switchMap(([id, posts]) => {\r\n  //       this.store.dispatch(setLoader({ status: true }));\r\n  //       if (!posts.length) {\r\n  //         return this.postService.postById(id).pipe(\r\n  //           map((resp) => {\r\n  //             this.store.dispatch(setLoader({ status: false }));\r\n  //             const posts: IPost[] = [{ ...resp, id }];\r\n  //             return loadPostSuccess({ posts });\r\n  //           })\r\n  //         );\r\n  //       } else {\r\n  //         this.store.dispatch(setLoader({ status: false }));\r\n  //         return of();\r\n  //       }\r\n  //     })\r\n  //   )\r\n  // );\r\n}\r\n"],"mappings":"AACA,SAAkBA,YAAY,EAAEC,MAAM,QAAQ,eAAe;AAE7D,SAKEC,gBAAgB,EAChBC,kBAAkB,QAGb,kBAAkB;AACzB,SAAiBC,GAAG,EAAEC,QAAQ,EAAEC,EAAE,EAAaC,cAAc,QAAQ,MAAM;AAM3E,SAASC,WAAW,QAAQ,oBAAoB;;;;;AAGhD,OAAM,MAAOC,cAAc;EACzBC,YACUC,KAAuB,EACvBC,QAAiB,EACjBC,cAA8B;IAF9B,KAAAF,KAAK,GAALA,KAAK;IACL,KAAAC,QAAQ,GAARA,QAAQ;IACR,KAAAC,cAAc,GAAdA,cAAc;IAGxB,KAAAC,YAAY,GAAGd,YAAY,CAAC,MAC1B,IAAI,CAACY,QAAQ,CAACG,IAAI,CAChBd,MAAM,CAACC,gBAAgB,CAAC,EACxBK,cAAc,CAAC,IAAI,CAACI,KAAK,CAACK,MAAM,CAACR,WAAW,CAAC,CAAC,EAC9CH,QAAQ,CAAC,CAAC,CAACY,MAAM,EAAEC,QAAQ,CAAC,KAAI;MAC9B;MACA,IAAI,CAACA,QAAQ,CAACC,MAAM,EAAE;QACpB,OAAO,IAAI,CAACN,cAAc,CAACO,QAAQ,EAAE,CAACL,IAAI,CACxCX,GAAG,CAAEc,QAAoB,IAAI;UAC3B;UACA,OAAOf,kBAAkB,CAAC;YAAEe;UAAQ,CAAE,CAAC;QACzC,CAAC,CAAC,CACH;OACF,MAAM;QACL;QACA,OAAOZ,EAAE,EAAE;;IAEf,CAAC,CAAC,CACH,CACF;EArBE;EAAC,QAAAe,CAAA,G;qBALOZ,cAAc,EAAAa,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,KAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,OAAA,GAAAL,EAAA,CAAAC,QAAA,CAAAK,EAAA,CAAAC,cAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAdrB,cAAc;IAAAsB,OAAA,EAAdtB,cAAc,CAAAuB;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
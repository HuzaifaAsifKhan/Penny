{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services\";\nexport class HttpTokenInterceptor {\n  constructor(jwtService) {\n    this.jwtService = jwtService;\n  }\n  intercept(req, next) {\n    const headersConfig = {\n      'Content-Type': 'application/json',\n      Accept: 'application/json'\n    };\n    const token = this.jwtService.getToken();\n    if (token) {\n      headersConfig['Authorization'] = `Bearer ${token}`;\n    }\n    const request = req.clone({\n      setHeaders: headersConfig\n    });\n    return next.handle(request);\n  }\n  static #_ = this.ɵfac = function HttpTokenInterceptor_Factory(t) {\n    return new (t || HttpTokenInterceptor)(i0.ɵɵinject(i1.JwtService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: HttpTokenInterceptor,\n    factory: HttpTokenInterceptor.ɵfac\n  });\n}","map":{"version":3,"names":["HttpTokenInterceptor","constructor","jwtService","intercept","req","next","headersConfig","Accept","token","getToken","request","clone","setHeaders","handle","_","i0","ɵɵinject","i1","JwtService","_2","factory","ɵfac"],"sources":["C:\\Huzaifa\\Penny\\penny-frontend\\src\\app\\core\\interceptors\\http.token.interceptor.ts"],"sourcesContent":["import { Injectable, Injector } from '@angular/core';\r\nimport {\r\n  HttpEvent,\r\n  HttpInterceptor,\r\n  HttpHandler,\r\n  HttpRequest,\r\n} from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { JwtService } from '../services';\r\n\r\n@Injectable()\r\nexport class HttpTokenInterceptor implements HttpInterceptor {\r\n  constructor(private jwtService: JwtService) {}\r\n\r\n  intercept(\r\n    req: HttpRequest<any>,\r\n    next: HttpHandler\r\n  ): Observable<HttpEvent<any>> {\r\n    const headersConfig: any = {\r\n      'Content-Type': 'application/json',\r\n      Accept: 'application/json',\r\n    };\r\n\r\n    const token = this.jwtService.getToken();\r\n\r\n    if (token) {\r\n      headersConfig['Authorization'] = `Bearer ${token}`;\r\n    }\r\n\r\n    const request = req.clone({ setHeaders: headersConfig });\r\n    return next.handle(request);\r\n  }\r\n}\r\n"],"mappings":";;AAYA,OAAM,MAAOA,oBAAoB;EAC/BC,YAAoBC,UAAsB;IAAtB,KAAAA,UAAU,GAAVA,UAAU;EAAe;EAE7CC,SAASA,CACPC,GAAqB,EACrBC,IAAiB;IAEjB,MAAMC,aAAa,GAAQ;MACzB,cAAc,EAAE,kBAAkB;MAClCC,MAAM,EAAE;KACT;IAED,MAAMC,KAAK,GAAG,IAAI,CAACN,UAAU,CAACO,QAAQ,EAAE;IAExC,IAAID,KAAK,EAAE;MACTF,aAAa,CAAC,eAAe,CAAC,GAAG,UAAUE,KAAK,EAAE;;IAGpD,MAAME,OAAO,GAAGN,GAAG,CAACO,KAAK,CAAC;MAAEC,UAAU,EAAEN;IAAa,CAAE,CAAC;IACxD,OAAOD,IAAI,CAACQ,MAAM,CAACH,OAAO,CAAC;EAC7B;EAAC,QAAAI,CAAA,G;qBApBUd,oBAAoB,EAAAe,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAApBnB,oBAAoB;IAAAoB,OAAA,EAApBpB,oBAAoB,CAAAqB;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
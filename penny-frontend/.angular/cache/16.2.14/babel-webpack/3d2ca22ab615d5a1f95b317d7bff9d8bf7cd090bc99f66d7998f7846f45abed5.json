{"ast":null,"code":"import { BehaviorSubject, ReplaySubject, distinctUntilChanged, map } from 'rxjs';\nimport { environment } from '../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./api.service\";\nimport * as i2 from \"./jwt.service\";\nexport class UserService {\n  constructor(apiService, jwtService) {\n    this.apiService = apiService;\n    this.jwtService = jwtService;\n    this.currentUserSubject = new BehaviorSubject({});\n    this.currentUser = this.currentUserSubject.asObservable().pipe(distinctUntilChanged());\n    this.isAuthenticatedSubject = new ReplaySubject(1);\n    this.isAuthenticated = this.isAuthenticatedSubject.asObservable().pipe(distinctUntilChanged());\n  }\n  populate() {\n    // If JWT detected, attempt to get & store user's info\n    if (this.jwtService.getToken() && typeof this.jwtService.getToken !== 'undefined') {\n      this.setAuth(this.jwtService.getUser());\n    } else {\n      // Remove any potential remnants of previous auth states\n      this.purgeAuth();\n    }\n  }\n  getCurrentUser() {\n    return this.currentUserSubject.value;\n  }\n  attemptAuth(type, credentials) {\n    const route = type === 'signin' ? '/signin' : 'signup';\n    return this.apiService.post(`${environment.api_url}/auth/${type}`, (({\n      username,\n      password\n    }) => ({\n      username,\n      password\n    }))(credentials)).pipe(map(data => {\n      this.setAuth(data);\n      return data;\n    }));\n  }\n  setAuth(user) {\n    // Save JWT sent from server in localstorage\n    this.jwtService.saveToken(user.token);\n    this.jwtService.saveUser(user);\n    // Set current user data into observable\n    this.currentUserSubject.next(user);\n    // Set isAuthenticated to true\n    this.isAuthenticatedSubject.next(true);\n  }\n  purgeAuth() {\n    // Remove JWT from localstorage\n    this.jwtService.destroy();\n    // Set current user to an empty object\n    this.currentUserSubject.next({});\n    // Set auth status to false\n    this.isAuthenticatedSubject.next(false);\n  }\n  static #_ = this.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)(i0.ɵɵinject(i1.ApiService), i0.ɵɵinject(i2.JwtService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac\n  });\n}","map":{"version":3,"names":["BehaviorSubject","ReplaySubject","distinctUntilChanged","map","environment","UserService","constructor","apiService","jwtService","currentUserSubject","currentUser","asObservable","pipe","isAuthenticatedSubject","isAuthenticated","populate","getToken","setAuth","getUser","purgeAuth","getCurrentUser","value","attemptAuth","type","credentials","route","post","api_url","username","password","data","user","saveToken","token","saveUser","next","destroy","_","i0","ɵɵinject","i1","ApiService","i2","JwtService","_2","factory","ɵfac"],"sources":["C:\\Huzaifa\\Penny\\penny-frontend\\src\\app\\core\\services\\user.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  BehaviorSubject,\n  Observable,\n  ReplaySubject,\n  distinctUntilChanged,\n  map,\n} from 'rxjs';\nimport { JwtService } from './jwt.service';\nimport { ApiService } from './api.service';\nimport { environment } from '../../../environments/environment';\n\n@Injectable()\nexport class UserService {\n  private currentUserSubject = new BehaviorSubject<any>({} as any);\n  public currentUser = this.currentUserSubject\n    .asObservable()\n    .pipe(distinctUntilChanged());\n\n  private isAuthenticatedSubject = new ReplaySubject<boolean>(1);\n  public isAuthenticated = this.isAuthenticatedSubject\n    .asObservable()\n    .pipe(distinctUntilChanged());\n\n  constructor(private apiService: ApiService, private jwtService: JwtService) {}\n\n  populate() {\n    // If JWT detected, attempt to get & store user's info\n    if (\n      this.jwtService.getToken() &&\n      typeof this.jwtService.getToken !== 'undefined'\n    ) {\n      this.setAuth(this.jwtService.getUser());\n    } else {\n      // Remove any potential remnants of previous auth states\n      this.purgeAuth();\n    }\n  }\n\n  getCurrentUser(): any {\n    return this.currentUserSubject.value;\n  }\n\n  attemptAuth(type: any, credentials: any): Observable<any> {\n    const route = type === 'signin' ? '/signin' : 'signup';\n\n    return this.apiService\n      .post(\n        `${environment.api_url}/auth/${type}`,\n        (({ username, password }) => ({ username, password }))(credentials)\n      )\n      .pipe(\n        map((data) => {\n          this.setAuth(data);\n          return data;\n        })\n      );\n  }\n\n  setAuth(user: any) {\n    // Save JWT sent from server in localstorage\n    this.jwtService.saveToken(user.token);\n    this.jwtService.saveUser(user);\n    // Set current user data into observable\n    this.currentUserSubject.next(user);\n    // Set isAuthenticated to true\n    this.isAuthenticatedSubject.next(true);\n  }\n\n  purgeAuth() {\n    // Remove JWT from localstorage\n    this.jwtService.destroy();\n    // Set current user to an empty object\n    this.currentUserSubject.next({} as any);\n    // Set auth status to false\n    this.isAuthenticatedSubject.next(false);\n  }\n}\n"],"mappings":"AACA,SACEA,eAAe,EAEfC,aAAa,EACbC,oBAAoB,EACpBC,GAAG,QACE,MAAM;AAGb,SAASC,WAAW,QAAQ,mCAAmC;;;;AAG/D,OAAM,MAAOC,WAAW;EAWtBC,YAAoBC,UAAsB,EAAUC,UAAsB;IAAtD,KAAAD,UAAU,GAAVA,UAAU;IAAsB,KAAAC,UAAU,GAAVA,UAAU;IAVtD,KAAAC,kBAAkB,GAAG,IAAIT,eAAe,CAAM,EAAS,CAAC;IACzD,KAAAU,WAAW,GAAG,IAAI,CAACD,kBAAkB,CACzCE,YAAY,EAAE,CACdC,IAAI,CAACV,oBAAoB,EAAE,CAAC;IAEvB,KAAAW,sBAAsB,GAAG,IAAIZ,aAAa,CAAU,CAAC,CAAC;IACvD,KAAAa,eAAe,GAAG,IAAI,CAACD,sBAAsB,CACjDF,YAAY,EAAE,CACdC,IAAI,CAACV,oBAAoB,EAAE,CAAC;EAE8C;EAE7Ea,QAAQA,CAAA;IACN;IACA,IACE,IAAI,CAACP,UAAU,CAACQ,QAAQ,EAAE,IAC1B,OAAO,IAAI,CAACR,UAAU,CAACQ,QAAQ,KAAK,WAAW,EAC/C;MACA,IAAI,CAACC,OAAO,CAAC,IAAI,CAACT,UAAU,CAACU,OAAO,EAAE,CAAC;KACxC,MAAM;MACL;MACA,IAAI,CAACC,SAAS,EAAE;;EAEpB;EAEAC,cAAcA,CAAA;IACZ,OAAO,IAAI,CAACX,kBAAkB,CAACY,KAAK;EACtC;EAEAC,WAAWA,CAACC,IAAS,EAAEC,WAAgB;IACrC,MAAMC,KAAK,GAAGF,IAAI,KAAK,QAAQ,GAAG,SAAS,GAAG,QAAQ;IAEtD,OAAO,IAAI,CAAChB,UAAU,CACnBmB,IAAI,CACH,GAAGtB,WAAW,CAACuB,OAAO,SAASJ,IAAI,EAAE,EACrC,CAAC,CAAC;MAAEK,QAAQ;MAAEC;IAAQ,CAAE,MAAM;MAAED,QAAQ;MAAEC;IAAQ,CAAE,CAAC,EAAEL,WAAW,CAAC,CACpE,CACAZ,IAAI,CACHT,GAAG,CAAE2B,IAAI,IAAI;MACX,IAAI,CAACb,OAAO,CAACa,IAAI,CAAC;MAClB,OAAOA,IAAI;IACb,CAAC,CAAC,CACH;EACL;EAEAb,OAAOA,CAACc,IAAS;IACf;IACA,IAAI,CAACvB,UAAU,CAACwB,SAAS,CAACD,IAAI,CAACE,KAAK,CAAC;IACrC,IAAI,CAACzB,UAAU,CAAC0B,QAAQ,CAACH,IAAI,CAAC;IAC9B;IACA,IAAI,CAACtB,kBAAkB,CAAC0B,IAAI,CAACJ,IAAI,CAAC;IAClC;IACA,IAAI,CAAClB,sBAAsB,CAACsB,IAAI,CAAC,IAAI,CAAC;EACxC;EAEAhB,SAASA,CAAA;IACP;IACA,IAAI,CAACX,UAAU,CAAC4B,OAAO,EAAE;IACzB;IACA,IAAI,CAAC3B,kBAAkB,CAAC0B,IAAI,CAAC,EAAS,CAAC;IACvC;IACA,IAAI,CAACtB,sBAAsB,CAACsB,IAAI,CAAC,KAAK,CAAC;EACzC;EAAC,QAAAE,CAAA,G;qBA/DUhC,WAAW,EAAAiC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAXvC,WAAW;IAAAwC,OAAA,EAAXxC,WAAW,CAAAyC;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
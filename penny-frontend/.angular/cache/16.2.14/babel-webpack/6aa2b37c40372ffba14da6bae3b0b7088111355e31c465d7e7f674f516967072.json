{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class ApiService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.formatErrors = error => {\n      if ([401, 403].indexOf(error.status) !== -1) {\n        // auto logout if 401 Unauthorized or 403 Forbidden response returned from api\n        console.log(this.router);\n        this.router.navigateByUrl('/auth/login');\n      }\n      return throwError(() => error.error.message || error.error);\n    };\n  }\n  get(path, params = new HttpParams()) {\n    return this.http.get(`${path}`, {\n      params\n    }).pipe(catchError(this.formatErrors));\n  }\n  put(path, body = {}) {\n    return this.http.put(`${path}`, JSON.stringify(body)).pipe(catchError(this.formatErrors));\n  }\n  post(path, body = {}, params = new HttpParams()) {\n    return this.http.post(`${path}`, JSON.stringify(body), {\n      params\n    }).pipe(catchError(this.formatErrors));\n  }\n  delete(path) {\n    return this.http.delete(`${path}`).pipe(catchError(this.formatErrors));\n  }\n  filterToParam(filter) {\n    const params = {};\n    filter ? Object.keys(filter).forEach(key => {\n      params[key] = filter[key];\n    }) : '';\n    return params;\n  }\n  static #_ = this.ɵfac = function ApiService_Factory(t) {\n    return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ApiService,\n    factory: ApiService.ɵfac\n  });\n}","map":{"version":3,"names":["HttpParams","throwError","catchError","ApiService","constructor","http","router","formatErrors","error","indexOf","status","console","log","navigateByUrl","message","get","path","params","pipe","put","body","JSON","stringify","post","delete","filterToParam","filter","Object","keys","forEach","key","_","i0","ɵɵinject","i1","HttpClient","i2","Router","_2","factory","ɵfac"],"sources":["C:\\Huzaifa\\Penny\\penny-frontend\\src\\app\\core\\services\\api.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\n\r\nimport { catchError } from 'rxjs/operators';\r\nimport { Router } from '@angular/router';\r\n\r\n@Injectable()\r\nexport class ApiService {\r\n  constructor(private http: HttpClient, private router: Router) {}\r\n\r\n  private formatErrors = (error: any) => {\r\n    if ([401, 403].indexOf(error.status) !== -1) {\r\n      // auto logout if 401 Unauthorized or 403 Forbidden response returned from api\r\n      console.log(this.router);\r\n      this.router.navigateByUrl('/auth/login');\r\n    }\r\n    return throwError(() => error.error.message || error.error);\r\n  };\r\n\r\n  get(path: string, params: HttpParams = new HttpParams()): Observable<any> {\r\n    return this.http\r\n      .get(`${path}`, { params })\r\n      .pipe(catchError(this.formatErrors));\r\n  }\r\n\r\n  put(path: string, body: Object = {}): Observable<any> {\r\n    return this.http\r\n      .put(`${path}`, JSON.stringify(body))\r\n      .pipe(catchError(this.formatErrors));\r\n  }\r\n\r\n  post(\r\n    path: string,\r\n    body: Object = {},\r\n    params: HttpParams | any = new HttpParams()\r\n  ): Observable<any> {\r\n    return this.http\r\n      .post(`${path}`, JSON.stringify(body), { params })\r\n      .pipe(catchError(this.formatErrors));\r\n  }\r\n\r\n  delete(path: string): Observable<any> {\r\n    return this.http.delete(`${path}`).pipe(catchError(this.formatErrors));\r\n  }\r\n\r\n  filterToParam(filter: any) {\r\n    const params: any = {};\r\n    filter\r\n      ? Object.keys(filter).forEach((key) => {\r\n          params[key] = filter[key];\r\n        })\r\n      : '';\r\n\r\n    return params;\r\n  }\r\n}\r\n"],"mappings":"AACA,SAAqBA,UAAU,QAAQ,sBAAsB;AAC7D,SAAqBC,UAAU,QAAQ,MAAM;AAE7C,SAASC,UAAU,QAAQ,gBAAgB;;;;AAI3C,OAAM,MAAOC,UAAU;EACrBC,YAAoBC,IAAgB,EAAUC,MAAc;IAAxC,KAAAD,IAAI,GAAJA,IAAI;IAAsB,KAAAC,MAAM,GAANA,MAAM;IAE5C,KAAAC,YAAY,GAAIC,KAAU,IAAI;MACpC,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,CAACC,OAAO,CAACD,KAAK,CAACE,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE;QAC3C;QACAC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACN,MAAM,CAAC;QACxB,IAAI,CAACA,MAAM,CAACO,aAAa,CAAC,aAAa,CAAC;;MAE1C,OAAOZ,UAAU,CAAC,MAAMO,KAAK,CAACA,KAAK,CAACM,OAAO,IAAIN,KAAK,CAACA,KAAK,CAAC;IAC7D,CAAC;EAT8D;EAW/DO,GAAGA,CAACC,IAAY,EAAEC,MAAA,GAAqB,IAAIjB,UAAU,EAAE;IACrD,OAAO,IAAI,CAACK,IAAI,CACbU,GAAG,CAAC,GAAGC,IAAI,EAAE,EAAE;MAAEC;IAAM,CAAE,CAAC,CAC1BC,IAAI,CAAChB,UAAU,CAAC,IAAI,CAACK,YAAY,CAAC,CAAC;EACxC;EAEAY,GAAGA,CAACH,IAAY,EAAEI,IAAA,GAAe,EAAE;IACjC,OAAO,IAAI,CAACf,IAAI,CACbc,GAAG,CAAC,GAAGH,IAAI,EAAE,EAAEK,IAAI,CAACC,SAAS,CAACF,IAAI,CAAC,CAAC,CACpCF,IAAI,CAAChB,UAAU,CAAC,IAAI,CAACK,YAAY,CAAC,CAAC;EACxC;EAEAgB,IAAIA,CACFP,IAAY,EACZI,IAAA,GAAe,EAAE,EACjBH,MAAA,GAA2B,IAAIjB,UAAU,EAAE;IAE3C,OAAO,IAAI,CAACK,IAAI,CACbkB,IAAI,CAAC,GAAGP,IAAI,EAAE,EAAEK,IAAI,CAACC,SAAS,CAACF,IAAI,CAAC,EAAE;MAAEH;IAAM,CAAE,CAAC,CACjDC,IAAI,CAAChB,UAAU,CAAC,IAAI,CAACK,YAAY,CAAC,CAAC;EACxC;EAEAiB,MAAMA,CAACR,IAAY;IACjB,OAAO,IAAI,CAACX,IAAI,CAACmB,MAAM,CAAC,GAAGR,IAAI,EAAE,CAAC,CAACE,IAAI,CAAChB,UAAU,CAAC,IAAI,CAACK,YAAY,CAAC,CAAC;EACxE;EAEAkB,aAAaA,CAACC,MAAW;IACvB,MAAMT,MAAM,GAAQ,EAAE;IACtBS,MAAM,GACFC,MAAM,CAACC,IAAI,CAACF,MAAM,CAAC,CAACG,OAAO,CAAEC,GAAG,IAAI;MAClCb,MAAM,CAACa,GAAG,CAAC,GAAGJ,MAAM,CAACI,GAAG,CAAC;IAC3B,CAAC,CAAC,GACF,EAAE;IAEN,OAAOb,MAAM;EACf;EAAC,QAAAc,CAAA,G;qBA/CU5B,UAAU,EAAA6B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAVnC,UAAU;IAAAoC,OAAA,EAAVpC,UAAU,CAAAqC;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}